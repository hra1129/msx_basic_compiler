	asm_line.set( "LABEL", "", "_sub_input_all_blank" );
	this->subroutines.push_back( asm_line );
	asm_line.set( "COMMENT", "", ";\t-- Get return address (address with type information)" );
	this->subroutines.push_back( asm_line );
	asm_line.set( "pop", "", "bc" );
	this->subroutines.push_back( asm_line );
	asm_line.set( "LABEL", "", "_sub_input_all_blank_loop" );
	this->subroutines.push_back( asm_line );
	asm_line.set( "ld", "", "a, [bc]" );
	this->subroutines.push_back( asm_line );
	asm_line.set( "inc", "", "bc" );
	this->subroutines.push_back( asm_line );
	asm_line.set( "or", "", "a", "a" );
	this->subroutines.push_back( asm_line );
	asm_line.set( "jr", "z", "_sub_input_all_blank_exit" );
	this->subroutines.push_back( asm_line );
	asm_line.set( "cp", "", "a", "3" );
	this->subroutines.push_back( asm_line );
	asm_line.set( "jr", "", "nz, _sub_input_all_blank_put" );
	this->subroutines.push_back( asm_line );
	asm_line.set( "COMMENT", "", "\t-- If it is a string, add it to the candidates to be freed later, and then stuff \"\"." );
	this->subroutines.push_back( asm_line );
	asm_line.set( "pop", "", "hl" );
	this->subroutines.push_back( asm_line );
	asm_line.set( "ld", "", "e", "[hl]" );
	this->subroutines.push_back( asm_line );
	asm_line.set( "inc", "", "hl" );
	this->subroutines.push_back( asm_line );
	asm_line.set( "ld", "", "d", "[hl]" );
	this->subroutines.push_back( asm_line );
	asm_line.set( "ld", "", "[hl]", "str_0 >> 8" );
	this->subroutines.push_back( asm_line );
	asm_line.set( "dec", "", "hl" );
	this->subroutines.push_back( asm_line );
	asm_line.set( "ld", "", "[hl]", "str_0 & 255" );
	this->subroutines.push_back( asm_line );
	asm_line.set( "ld", "", "hl", "SVARS_INPUT_FREE_STR0" );
	this->subroutines.push_back( asm_line );
	asm_line.set( "LABEL", "", "_sub_input_all_blank_regist_loop" );
	this->subroutines.push_back( asm_line );
	asm_line.set( "ld", "", "a", "[hl]" );
	this->subroutines.push_back( asm_line );
	asm_line.set( "inc", "", "hl" );
	this->subroutines.push_back( asm_line );
	asm_line.set( "or", "", "a", "[hl]" );
	this->subroutines.push_back( asm_line );
	asm_line.set( "jr", "z", "_sub_input_all_blank_regist" );
	this->subroutines.push_back( asm_line );
	asm_line.set( "inc", "", "hl" );
	this->subroutines.push_back( asm_line );
	asm_line.set( "jr", "", "_sub_input_all_blank_regist_loop" );
	this->subroutines.push_back( asm_line );
	asm_line.set( "LABEL", "", "_sub_input_all_blank_regist" );
	this->subroutines.push_back( asm_line );
	asm_line.set( "ld", "", "[hl]", "d" );
	this->subroutines.push_back( asm_line );
	asm_line.set( "dec", "", "hl" );
	this->subroutines.push_back( asm_line );
	asm_line.set( "ld", "", "[hl]", "e" );
	this->subroutines.push_back( asm_line );
	asm_line.set( "jr", "", "_sub_input_all_blank_loop" );
	this->subroutines.push_back( asm_line );
	asm_line.set( "LABEL", "", "_sub_input_all_blank_put" );
	this->subroutines.push_back( asm_line );
	asm_line.set( "pop", "", "hl" );
	this->subroutines.push_back( asm_line );
	asm_line.set( "ld", "", "e", "0" );
	this->subroutines.push_back( asm_line );
	asm_line.set( "LABEL", "", "_sub_input_all_blank_fill" );
	this->subroutines.push_back( asm_line );
	asm_line.set( "ld", "", "[hl]", "e" );
	this->subroutines.push_back( asm_line );
	asm_line.set( "inc", "", "hl" );
	this->subroutines.push_back( asm_line );
	asm_line.set( "dec", "", "a" );
	this->subroutines.push_back( asm_line );
	asm_line.set( "jr", "nz", "_sub_input_all_blank_fill" );
	this->subroutines.push_back( asm_line );
	asm_line.set( "jr", "", "_sub_input_all_blank_loop" );
	this->subroutines.push_back( asm_line );
	asm_line.set( "LABEL", "", "_sub_input_all_blank_exit" );
	this->subroutines.push_back( asm_line );
