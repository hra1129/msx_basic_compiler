; ------------------------------------------------------------------------
; Compiled by MSX-BACON from test.asc
; ------------------------------------------------------------------------
; 
work_h_timi                     equ 0FD9Fh
bios_syntax_error               equ 04055h
bios_calslt                     equ 0001Ch
bios_enaslt                     equ 00024h
work_mainrom                    equ 0FCC1h
work_blibslot                   equ 0F3D3h
signature                       equ 04010h
bios_gttrig                     equ 000D8h
; BSAVE header -----------------------------------------------------------
        DEFB        0FEh
        DEFW        start_address
        DEFW        end_address
        DEFW        start_address
        ORG         08010h
start_address:
        LD          (save_stack), SP
        CALL        check_blib
        JP          NZ, bios_syntax_error
        LD          HL, work_h_timi
        LD          DE, h_timi_backup
        LD          BC, 5
        LDIR        
        DI          
        LD          HL, h_timi_handler
        LD          (work_h_timi + 1), HL
        LD          A, 0C3h
        LD          (work_h_timi), A
        EI          
        LD          DE, program_start
        JP          program_run
jp_hl:
        JP          (HL)
program_start:
line_100:
        CALL        interrupt_prcess
        CALL        interrupt_prcess
        LD          HL, vari_A
        PUSH        HL
        LD          HL, 0
        POP         DE
        EX          DE, HL
        LD          (HL), E
        INC         HL
        LD          (HL), D
line_110:
        CALL        interrupt_prcess
        LD          HL, (vari_A)
        LD          A, L
        OR          H
        JP          Z, _pt0
        LD          DE, 5
        RST         020h
        JP          NC, _pt0
        ADD         HL, HL
        LD          DE, _pt1 - 2
        ADD         HL, DE
        LD          E, (HL)
        INC         HL
        LD          D, (HL)
        EX          DE, HL
        LD          DE, _pt0
        PUSH        DE
        JP          (HL)
_pt1:
        DEFW        line_130
        DEFW        line_140
        DEFW        line_150
        DEFW        line_160
        DEFW        line_170
_pt0:
line_120:
        CALL        interrupt_prcess
        LD          HL, str_1
        PUSH        HL
        CALL        puts
        POP         HL
        CALL        free_string
        LD          HL, str_3
        PUSH        HL
        CALL        puts
        POP         HL
        CALL        free_string
        LD          HL, str_2
        CALL        puts
line_8353:
        CALL        interrupt_prcess
        JP          program_termination
line_130:
        CALL        interrupt_prcess
        LD          HL, str_4
        PUSH        HL
        CALL        puts
        POP         HL
        CALL        free_string
        LD          HL, str_5
        PUSH        HL
        CALL        puts
        POP         HL
        CALL        free_string
        LD          HL, str_2
        CALL        puts
line_140:
        CALL        interrupt_prcess
        LD          HL, str_6
        PUSH        HL
        CALL        puts
        POP         HL
        CALL        free_string
        LD          HL, str_5
        PUSH        HL
        CALL        puts
        POP         HL
        CALL        free_string
        LD          HL, str_2
        CALL        puts
line_150:
        CALL        interrupt_prcess
        LD          HL, str_7
        PUSH        HL
        CALL        puts
        POP         HL
        CALL        free_string
        LD          HL, str_5
        PUSH        HL
        CALL        puts
        POP         HL
        CALL        free_string
        LD          HL, str_2
        CALL        puts
line_160:
        CALL        interrupt_prcess
        LD          HL, str_8
        PUSH        HL
        CALL        puts
        POP         HL
        CALL        free_string
        LD          HL, str_5
        PUSH        HL
        CALL        puts
        POP         HL
        CALL        free_string
        LD          HL, str_2
        CALL        puts
line_170:
        CALL        interrupt_prcess
        LD          HL, str_9
        PUSH        HL
        CALL        puts
        POP         HL
        CALL        free_string
        LD          HL, str_5
        PUSH        HL
        CALL        puts
        POP         HL
        CALL        free_string
        LD          HL, str_2
        CALL        puts
program_termination:
        CALL        restore_h_timi
        LD          SP, (save_stack)
        RET         
check_blib:
        LD          a, (work_blibslot)
        LD          h, 040h
        CALL        bios_enaslt
        LD          bc, 8
        LD          hl, signature
        LD          de, signature_ref
_check_blib_loop:
        LD          a, (de)
        INC         de
        CPI         
        JR          NZ, _check_blib_exit
        JP          PE, _check_blib_loop
_check_blib_exit:
        PUSH        af
        LD          a, (work_mainrom)
        LD          h, 040h
        CALL        bios_enaslt
        EI          
        POP         af
        RET         
signature_ref:
        DEFB        "BACONLIB"
call_blib:
        LD          iy, (work_blibslot - 1)
        JP          bios_calslt
puts:
        LD          B, (HL)
        INC         B
        DEC         B
        RET         Z
_puts_loop:
        INC         HL
        LD          A, (HL)
        RST         018h
        DJNZ        _puts_loop
        RET         
free_string:
        LD          DE, heap_start
        RST         020h
        RET         C
        LD          DE, (heap_next)
        RST         020h
        RET         NC
        LD          C, (HL)
        LD          B, 0
        INC         BC
        JP          free_heap
free_heap:
        PUSH        HL
        ADD         HL, BC
        EX          DE, HL
        LD          HL, (heap_next)
        SBC         HL, DE
        LD          C, L
        LD          B, H
        POP         HL
        EX          DE, HL
        LD          (heap_move_size), BC
        LD          (heap_remap_address), HL
        LD          A, C
        OR          B
        JR          Z, _free_heap_loop0
        LDIR        
_free_heap_loop0:
        LD          (heap_next), DE
        LD          HL, vars_area_start
_free_heap_loop1:
        LD          DE, varsa_area_end
        RST         020h
        JR          NC, _free_heap_loop1_end
        LD          E, (HL)
        INC         HL
        LD          D, (HL)
        PUSH        HL
        LD          HL, (heap_remap_address)
        EX          DE, HL
        RST         020h
        JR          C, _free_heap_loop1_next
        LD          HL, (heap_move_size)
        EX          DE, HL
        SBC         HL, DE
        POP         DE
        EX          DE, HL
        DEC         HL
        LD          (HL), E
        INC         HL
        LD          (HL), D
        PUSH        HL
_free_heap_loop1_next:
        POP         HL
        INC         HL
        JR          _free_heap_loop1
_free_heap_loop1_end:
        LD          HL, varsa_area_start
_free_heap_loop2:
        LD          DE, varsa_area_end
        RST         020h
        RET         NC
        LD          E, (HL)
        INC         HL
        LD          D, (HL)
        INC         HL
        PUSH        HL
        EX          DE, HL
        LD          E, (HL)
        INC         HL
        LD          D, (HL)
        INC         HL
        LD          C, (HL)
        INC         HL
        LD          B, 0
        ADD         HL, BC
        ADD         HL, BC
        EX          DE, HL
        SBC         HL, BC
        SBC         HL, BC
        RRC         H
        RRC         L
        LD          C, L
        LD          B, H
        EX          DE, HL
_free_heap_sarray_elements:
        LD          E, (HL)
        INC         HL
        LD          D, (HL)
        PUSH        HL
        LD          HL, (heap_remap_address)
        EX          DE, HL
        RST         020h
        JR          C, _free_heap_loop2_next
        LD          HL, (heap_move_size)
        SBC         HL, DE
        POP         DE
        EX          DE, HL
        DEC         HL
        LD          (HL), E
        INC         HL
        LD          (HL), D
        PUSH        HL
_free_heap_loop2_next:
        POP         HL
        INC         HL
        DEC         BC
        LD          A, C
        OR          B
        JR          NZ, _free_heap_sarray_elements
        POP         HL
        JR          _free_heap_loop2
program_run:
        LD          HL, heap_start
        LD          (heap_next), HL
        LD          HL, (save_stack)
        LD          SP, HL
        PUSH        DE
        LD          DE, 256
        XOR         A
        SBC         HL, DE
        LD          (heap_end), HL
        RET         
interrupt_prcess:
        LD          HL, (svari_on_interval_line)
        LD          A, L
        OR          H
        JR          Z, _skip_on_interval
        LD          A, (svarb_on_interval_exec)
        DEC         A
        JR          NZ, _skip_on_interval
        LD          (svarb_on_interval_exec), A
        CALL        jp_hl
_skip_on_interval:
        LD          HL, svarf_on_strig0_mode
        LD          DE, svari_on_strig0_line
        LD          B, 5
_on_strig_loop1:
        LD          A, (HL)
        INC         HL
        DEC         A
        JR          NZ, _skip_strig1
        OR          (HL)
        JR          Z, _skip_strig1
        INC         HL
        INC         A
        OR          (HL)
        DEC         HL
        JR          NZ, _skip_strig1
        DEC         A
        INC         HL
        LD          (HL), A
        DEC         HL
        PUSH        HL
        EX          DE, HL
        LD          E, (HL)
        INC         HL
        LD          D, (HL)
        DEC         HL
        PUSH        HL
        EX          DE, HL
        PUSH        BC
        CALL        jp_hl
        POP         BC
        POP         DE
        POP         HL
_skip_strig1:
        INC         DE
        INC         DE
        INC         HL
        INC         HL
        INC         HL
        DJNZ        _on_strig_loop1
        RET         
interrupt_prcess_end:
h_timi_handler:
        PUSH        AF
        LD          A, (svarb_on_interval_mode)
        OR          A
        JR          Z, _end_of_interval
        LD          HL, (svari_on_interval_counter)
        LD          A, L
        OR          H
        JR          Z, _happned_interval
        DEC         HL
        LD          (svari_on_interval_counter), HL
        JR          _end_of_interval
_happned_interval:
        LD          A, (svarb_on_interval_mode)
        DEC         A
        JR          NZ, _end_of_interval
        INC         A
        LD          (svarb_on_interval_exec), A
        LD          HL, (svari_on_interval_value)
        LD          (svari_on_interval_counter), HL
_end_of_interval:
        LD          HL, svarf_on_strig0_mode
        LD          BC, 0500h
_on_strig_loop2:
        LD          A, (HL)
        INC         HL
        OR          A
        JR          Z, _skip_strig2
        LD          A, (HL)
        INC         HL
        LD          (HL), A
        DEC         HL
        LD          A, C
        PUSH        BC
        CALL        bios_gttrig
        POP         BC
        LD          (HL), A
_skip_strig2:
        INC         HL
        INC         HL
        INC         HL
        INC         C
        DJNZ        _on_strig_loop2
_end_of_strig:
        DI          
        POP         AF
        JP          h_timi_backup
restore_h_timi:
        DI          
        LD          HL, h_timi_backup
        LD          DE, work_h_timi
        LD          BC, 5
        LDIR        
        EI          
        RET         
str_0:
        DEFB        000h
str_1:
        DEFB        008h, 022h, 054h, 048h, 052h, 04Fh, 055h, 047h, 048h
str_2:
        DEFB        002h, 00Dh, 00Ah
str_3:
        DEFB        012h, 022h, 03Ah, 041h, 0EFh, 041h, 0F1h, 012h, 03Ah, 08Bh, 020h, 041h, 0EFh, 012h, 020h, 0DAh, 020h, 00Eh, 06Eh
str_4:
        DEFB        004h, 022h, 031h, 033h, 030h
str_5:
        DEFB        009h, 022h, 03Ah, 041h, 0EFh, 041h, 0F1h, 012h, 03Ah, 08Eh
str_6:
        DEFB        004h, 022h, 031h, 034h, 030h
str_7:
        DEFB        004h, 022h, 031h, 035h, 030h
str_8:
        DEFB        004h, 022h, 031h, 036h, 030h
str_9:
        DEFB        004h, 022h, 031h, 037h, 030h
save_stack:
        DEFW        0
heap_next:
        DEFW        0
heap_end:
        DEFW        0
heap_move_size:
        DEFW        0
heap_remap_address:
        DEFW        0
h_timi_backup:
        DEFB        0, 0, 0, 0, 0
var_area_start:
svarb_on_interval_exec:
        DEFB        0
svarb_on_interval_mode:
        DEFB        0
svarf_on_strig0_mode:
        DEFW        0, 0
svarf_on_strig1_mode:
        DEFW        0, 0
svarf_on_strig2_mode:
        DEFW        0, 0
svarf_on_strig3_mode:
        DEFW        0, 0
svarf_on_strig4_mode:
        DEFW        0, 0
svarf_on_strig5_mode_dummy:
        DEFW        0, 0
svarf_on_strig6_mode_dummy:
        DEFW        0, 0
svarf_on_strig7_mode_dummy:
        DEFW        0, 0
svari_on_interval_counter:
        DEFW        0
svari_on_interval_line:
        DEFW        0
svari_on_interval_value:
        DEFW        0
svari_on_strig0_line:
        DEFW        0
svari_on_strig1_line:
        DEFW        0
svari_on_strig2_line:
        DEFW        0
svari_on_strig3_line:
        DEFW        0
svari_on_strig4_line:
        DEFW        0
vari_A:
        DEFW        0
var_area_end:
vars_area_start:
vars_area_end:
vara_area_start:
vara_area_end:
varsa_area_start:
varsa_area_end:
heap_start:
end_address:
