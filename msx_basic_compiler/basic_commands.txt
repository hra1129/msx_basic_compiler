MSX-BACON による MSX-BASIC の命令サポート一覧
===============================================================================

-------------------------------------------------------------------------------
【書式】
	ABS( <数値> )
【備考】
	<数値> の絶対値を返す。
	MSX-BASIC では、値の値域によって適切な型の値が返されますが、
	MSX-BACON では、演算結果は、引数として与えられた <数値> と同じ型を採ります。
	<数値> が整数型で、-32768 だった場合は、期待する値は得られない。
	-32768 を 32768 にしたい場合は、CSNG を使って型キャストを行っていただければ
	単精度実数型の 32768 が返されます。
【例】
	ABS( X )
	ABS( CSNG( -32768 ) )

-------------------------------------------------------------------------------
【書式】
	ASC( <文字列> )
【備考】
	文字列の一番最初の文字のASCIIコードを返す。

【例】
	ASC("A")

-------------------------------------------------------------------------------
【書式】
	ATN( <値> )
【備考】
	<値> の arctan() を返す。
【例】
	ATN(1) * 4

-------------------------------------------------------------------------------
【書式】
	AUTO
【備考】
	非対応
【例】

-------------------------------------------------------------------------------
【書式】
	BASE()
【備考】
	未実装
【例】

-------------------------------------------------------------------------------
【書式】
	BEEP
【備考】
	ブザーを鳴らす。
【例】

-------------------------------------------------------------------------------
【書式】
	BIN$( <値> )
【備考】
	値を2進数表記に変換して、文字列として返す。
【例】
	BIN$(1234)

-------------------------------------------------------------------------------
【書式】
	BLOAD <文字列式> [,R]
【備考】
	<文字列式>で書かれたファイル名のバイナリファイルをメモリに読み込みます。
	もし、HIMEM より若いアドレスにロードされるファイルであれば、
	BACONのコンパイル結果が破壊されていると見なし、ロード後に停止します。
	ただし、R がついている場合は、実行して戻ってこない想定で動作します。
	HIMEM より大きいアドレス(FFFFhに近い方)の場合、ロード後も戻ってくる想定
	で動作します。こちらも、R がついている場合は、実行しますが、戻る想定で
	動作します。
	HIMEM の値は、CLEAR の第２パラメータで指定できます。

	BACON のコンパイル結果ではなく、自作の機械語コードを &HC000 へ読み込む場合、
	そのようなヘッダがついている BINファイルを用意しておいて、
	BACON の方は、冒頭に CLEAR 100,&HC000 と書いておけば、MSX-BASIC の時と
	同様の動作になります。

【例】
	BLOAD "TEST.BIN",R

-------------------------------------------------------------------------------
【書式】
	BLOAD <文字列式>, S
【備考】
	BSAVEでファイルに保存された VRAMデータを、読み出す。
	<文字列式>でファイル名を指定する。
【例】
	BLOAD "TEST.SC5",S

-------------------------------------------------------------------------------
【書式】
	BSAVE
【備考】
	未実装
【例】

-------------------------------------------------------------------------------
【書式】
	CALL IOTGET( <デバイスパス文字列>, <変数名> )
【備考】
	MSX0 において <デバイスパス文字列> で示されるデバイスから、情報を取得し、
	<変数名> で示される変数にその情報を格納する。
	デバイスによって、数値変数なのか文字列変数なのかが決まるため、適切な変数名
	を指定すること。
【例】
	CALL IOTGET( "host/ip", IP$ )

-------------------------------------------------------------------------------
【書式】
	CALL IOTPUT( <デバイスパス文字列>, <値> )
【備考】
	MSX0 において <デバイスパス文字列> で示されるデバイスへ、情報を送信する。
【例】
	CALL IOTGET( "host/brightness", 3 )

-------------------------------------------------------------------------------
【書式】
	CALL IOTINIT()
【備考】
	MSX0 において、ターミナル通信のためのフック初期化をやり直す。
【例】
	CALL IOTINIT()

-------------------------------------------------------------------------------
【書式】
	CALL
【備考】
	非対応。
	後から追加される拡張BASICには非対応。
	ただし一部の厳選した命令は、特別に対応しており、それらは個別に記載してある。
	例えば、CALL IOTGET() 等。
【例】

-------------------------------------------------------------------------------
【書式】
	CDBL( <値> )
【備考】
	整数・単精度実数・倍精度実数の値を倍精度実数に変換する。
	結果は必ず倍精度実数型になる。
【例】
	CDBL( 2 )

-------------------------------------------------------------------------------
【書式】
	CHR$( <文字コード> )
【備考】
	<文字コード> に対応する文字を文字列として返す。必ず 1文字の文字列になる。
【例】
	CHR$(65)

-------------------------------------------------------------------------------
【書式】
	CINT( <値> )
【備考】
	整数・単精度実数・倍精度実数の値を整数に変換する。結果は必ず整数型になり、
	整数型の範囲である -32768〜32767 に収まらない値は Overflow エラーになる。
【例】
	CINT( 2.345 )

-------------------------------------------------------------------------------
【書式】
	CIRCLE
【備考】
	未実装
【例】

-------------------------------------------------------------------------------
【書式】
	CLEAR <文字列領域のサイズ>, <機械語領域のアドレス>
【備考】
	BACON では <文字列領域のサイズ> は無視されます。
	<機械語領域のアドレス> は HIMEM に書き込まれ、スタックと変数も初期化されます。
	<機械語領域のアドレス>以降のアドレスを機械語領域として利用可能になります。
	※以降と言っても、E000h以降は使わない方が良いです。DiskBIOS等のワークエリア
	として使われていて、機種によってそのアドレスが異なります。試しに使ってみて
	問題なく動いたからと行って、別の機種でも同様とは限りませんのでご注意下さい。
【例】

-------------------------------------------------------------------------------
【書式】
	CLOAD
【備考】
	非対応
【例】

-------------------------------------------------------------------------------
【書式】
	CLOAD?
【備考】
	非対応
【例】

-------------------------------------------------------------------------------
【書式】
	CLOSE
【備考】
	未実装
【例】

-------------------------------------------------------------------------------
【書式】
	CLS
【備考】
	画面をクリアする。
【例】
	CLS

-------------------------------------------------------------------------------
【書式】
	COLOR <前景色>[, [<背景色>][, <周辺色>]]
【備考】
	画面の色を変更する。
	BIOS の CHGCLR が呼ばれる。
【例】
	COLOR 15
	COLOR 15, 4, 7
	COLOR , 4
	COLOR ,, 8

-------------------------------------------------------------------------------
【書式】
	COLOR [= {NEW|RESTORE| ( <PALETTE>, <RED>, <GREEN>, <BLUE> )}]
【備考】
	カラーパレットを変更する。MSX1で使用すると暴走するので注意。
	COLOR=NEW は、カラーパレットを初期化する。COLOR だけの実行でも同等である。
	COLOR=RESTORE は、VRAMのカラーパレットエリアに格納されているパレット情報に
	基づいてカラーパレットを変更する。
	COLOR=(P,R,G,B) は、カラーパレット P に対して、(R,G,B) の色を設定する。
	P は 0〜15、R,G,B は 0〜7 の範囲で指定。
【例】
	COLOR
	COLOR=NEW
	COLOR=RESTORE
	COLOR=(15,7,7,7)

-------------------------------------------------------------------------------
【書式】
	COLOR SPRITE
【備考】
	未実装
【例】

-------------------------------------------------------------------------------
【書式】
	CONT
【備考】
	非対応
【例】

-------------------------------------------------------------------------------
【書式】
	COPY
【備考】
	未実装
【例】

-------------------------------------------------------------------------------
【書式】
	COS( <値> )
【備考】
	cos(値) を返す。
【例】
	COS(PI)

-------------------------------------------------------------------------------
【書式】
	CSAVE
【備考】
	非対応
【例】

-------------------------------------------------------------------------------
【書式】
	CSNG( <値> )
【備考】
	整数・単精度実数・倍精度実数の値を単精度実数に変換する。
	結果は必ず単精度実数型になる。
【例】
	CSNG( 2 )

-------------------------------------------------------------------------------
【書式】
	CSRLIN
【備考】
	現在のカーソル位置 Y座標を返すシステム変数。リードオンリー。
【例】

-------------------------------------------------------------------------------
【書式】
	CVD( <文字列> )
【備考】
	まだ実装中

	文字列から先頭 8文字をそのまま倍精度実数型として変換する。
	MKD$() の逆変換である。
【例】
	CVD( "12345678" )

-------------------------------------------------------------------------------
【書式】
	CVI( <文字列> )
【備考】
	文字列から先頭 2文字をそのまま整数型として変換する。
	MKI$() の逆変換である。
【例】
	CVI( "12" )

-------------------------------------------------------------------------------
【書式】
	CVS( <文字列> )
【備考】
	まだ実装中

	文字列から先頭 8文字をそのまま単精度実数型として変換する。
	MKS$() の逆変換である。
【例】
	CVS( "1234" )

-------------------------------------------------------------------------------
【書式】
	DATA <定数> [, <定数> ....]
【備考】
	データを配置する。
【例】

-------------------------------------------------------------------------------
【書式】
	DEFFN <名前>[ ( <引数> [,<引数> [,<引数> ...]] )] = <関数の定義式>
【備考】
	未実装
【例】

-------------------------------------------------------------------------------
【書式】
	{DEFINT|DEFSNG|DEFDBL|DEFSTR} <変数名指定>
【備考】
	変数の型指定( %, !, #, $ )を省略した場合の型を指定する。
	省略表記のデフォルトは、倍精度実数型 # の扱いである。
	DEFINT は 整数型 %、DEFSNG は 単精度実数型 !、DEFDBL は倍精度実数型 #、
	DEFSTR は 文字列型 $ となる変数名の頭文字を指定する。

	DEFINT A

	これで、A から始まる名前の変数は、型指定をしなければ % を指定したことになる。
	A, A1, AB, AD 等。
	変数名指定は、"," で繋げて複数指定することができる。

	DEFINT A,B,C,D

	連続する場合、- で繋げて間の記述を省略できる。

	DEFINT A-D

	これらを組み合わせることもできる。

	DEFINT A-D,Q-T,Z

	, の前後では順不同だが、- の前後は同じか、右の方が Z に近くなければならない。
	従って、下記の記述はエラーである。

	DEFINT Z-A

	下記の記述は問題ない。

	DEFINT D,C,B,A

【例】
	DEFINT A
	DEFINT A,B,C,D
	DEFINT A-D
	DEFINT A-D,Q-T,Z
	DEFINT D,C,B,A

-------------------------------------------------------------------------------
【書式】
	DEFUSR [<番号>] = <開始アドレス>
【備考】
	USR<番号>(<式>) 関数で実行する機械語の開始アドレスを指定する。
	<番号> は、0〜9 のいずれかで、省略すると 0 の扱いになる。
【例】

-------------------------------------------------------------------------------
【書式】
	DELETE
【備考】
	非対応
【例】

-------------------------------------------------------------------------------
【書式】
	DIM <配列変数名> [<型識別子>] ( <要素1> [ ,<要素2> [...]] ) [, <配列変数名>... ]
【備考】
	配列変数のメモリを確保する。
	DIM A%(10) で、A%(0), A%(1), ... , A%(10) の 11要素の配列変数を使えるようになる。
	ただし、既に確保済みの配列変数に対して再度 DIM すると、Redimensioned array 
	の実行時エラーになる。サイズを変えたくなった場合は、一度 ERASE命令で削除してから
	再度 DIM しなければならない。削除した時点で内容は失われる。
	要素を , で区切ることにより、多次元配列も利用できる。
	ただし、同じ名前の配列変数は、１つのプログラム内で同じ次元数でなければならない。
	例えば、下記のようなケースはエラーである。

	DIM A%(1,2,3)
	ERASE A%
	DIM A%(1,2)

	最初は３次元で宣言し、次の宣言では２次元になっている。
	MSX-BASIC では許容される記述であるが、MSX-BACON ではコンパイル時にエラーになるので
	要注意。
	要素を囲う () は、[] でも代用できる。また、(] や [) などの組み合わせも可能であるが
	視認性が悪くなるため、() か [] を使うことを推奨する。
	型識別子を指定しなかった場合、DEFINT,DEGSNG, DEFDBL, DEFSTR の指定が有効であり、
	デフォルトでは倍精度実数である。

【例】
	DIM A(5), B(6), VX(8), VY(8)

-------------------------------------------------------------------------------
【書式】
	DRAW <文字列式>
【備考】
	未実装
【例】

-------------------------------------------------------------------------------
【書式】
	END
【備考】
	プログラムを終了する。
【例】
	END

-------------------------------------------------------------------------------
【書式】
	EOF( <ファイル番号> )
【備考】
	未実装
【例】

-------------------------------------------------------------------------------
【書式】
	ERASE <配列変数名> [, <配列変数名> ...]
【備考】
	指定の配列変数のメモリを解放する。
	MSX-BASIC では、解放済みの配列を指定した場合は、Illegal function call error に
	なるが、MSX-BACON では何もしない。

【例】
	ERASE A%

-------------------------------------------------------------------------------
【書式】
	ERL
【備考】
	未実装
【例】

-------------------------------------------------------------------------------
【書式】
	ERR
【備考】
	未実装
【例】

-------------------------------------------------------------------------------
【書式】
	ERROR <エラーコード>
【備考】
	指定のエラーコードのエラーを発生させる。
【例】
	ERROR 2

-------------------------------------------------------------------------------
【書式】
	EXP( <値> )
【備考】
	自然対数の底のべき乗 exp(値) を求める。
【例】
	EXP(1)

-------------------------------------------------------------------------------
【書式】
	FIX( <値> )
【備考】
	値型を整数値になるように丸める。
【例】
	FIX( -99999.9999 )

-------------------------------------------------------------------------------
【書式】
	FOR <変数名>=<初期値> TO <終値> [STEP <増分>]
【備考】
	FOR〜NEXT でループ処理。

【例】
	FOR I=0 TO 10:PRINT I;:NEXT I

-------------------------------------------------------------------------------
【書式】
	FRE( <式> )
【備考】
	ヒープメモリの空き容量を返す。
	MSX-BASIC では <式> が数値型の場合と、文字列型の場合とで返す値が異なるが、
	MSX-BACON では、<式> はコンパイル時に読み捨てられ、一意的にヒープメモリの
	空きを返す。
	MSX-BACON が 配列変数と文字列変数の確保領域として共通のヒープを使っており、
	区別が無いためである。宣言無しに使いたい方をたくさん使えるのである。

【例】

-------------------------------------------------------------------------------
【書式】
	GET DATE <文字列変数名> [,A]
【備考】
	未実装
【例】

-------------------------------------------------------------------------------
【書式】
	GET TIME <文字列変数名> [,A]
【備考】
	未実装
【例】

-------------------------------------------------------------------------------
【書式】
	GOSUB <行番号>
【備考】
	指定の行番号をサブルーチンとして、サブルーチンコールする。
	この次の位置を戻りアドレスとしてスタックへ積む。
【例】
	GOSUB 1000

-------------------------------------------------------------------------------
【書式】
	GOTO <行番号>
【備考】
	指定の行番号へジャンプする。
【例】
	GOTO 100

-------------------------------------------------------------------------------
【書式】
	HEX$( <値> )
【備考】
	値を 16進数表記に変換して、文字列として返す。
【例】
	HEX$(1234)

-------------------------------------------------------------------------------
【書式】
	IF <条件式> THEN {文|行番号} [ELSE {文|行番号}]
【備考】
	未実装
【例】

-------------------------------------------------------------------------------
【書式】
	IF <条件式> GOTO {文|行番号} [ELSE {文|行番号}]
【備考】
	未実装
【例】

-------------------------------------------------------------------------------
【書式】
	INKEY$
【備考】
	キーバッファに、入力された文字があればその一番古い文字を、無ければ空文字列を
	返す関数。
【例】

-------------------------------------------------------------------------------
【書式】
	INP( <I/Oポート番号> )
【備考】
	<I/Oポート番号> で示される番号の I/Oポートを読んで値を返す。
【例】
	INP(&HA8)

-------------------------------------------------------------------------------
【書式】
	INPUT ["文字列";] <変数名> [, <変数名> ...]
【備考】
	入力された値を変数に格納する。
【例】
	INPUT A$,B$
	INPUT "message";A

-------------------------------------------------------------------------------
【書式】
	INSTR( <文字列1>, <文字列2> )
【備考】
	<文字列1> の中の <文字列2> の位置を返す。位置は一番先頭が 1 となる値であり、
	一致する位置がなければ 0 が返ってくる。
	完全に一致する場所を返すので、例えばアルファベットの大小や、ひらがな・かたかな
	は別のモノとして比較する。
	<文字列2> が "" の場合は、1 が返る。

	INSTR( "ABCD", "B" ) → 2
	INSTR( "ABCD", "a" ) → 0 (不一致)
	INSTR( "ABCD", "" )  → 1

	<文字列1>, <文字列2> ともに文字列式なので、変数や式を与えることも出来る。

	INSTR( " aAbBcCdD", INKEY$ )\2 → ABCD が押されれば 1,2,3,4 となり、
	押されてない、他のキーが押された場合は 0 が返る。

【例】
	A = INSTR( "ABCD", "B" )
	B = INSTR( "ABCD", "a" )

-------------------------------------------------------------------------------
【書式】
	INT( <値> )
【備考】
	<値> の小数部を切り捨てて整数にする。
【例】
	INT(3.14)

-------------------------------------------------------------------------------
【書式】
	INTERVAL {ON|OFF|STOP}
【備考】
	ON:タイマー割り込み許可、OFF:タイマー割り込み禁止、STOP:タイマー割り込みの保留。
【例】
	INTERVAL ON

-------------------------------------------------------------------------------
【書式】
	KEY {ON|OFF|LIST}
【備考】
	ファンクションキーを、表示・非表示・一覧表示する。
【例】
	KEY ON
	KEY OFF
	KEY LIST

-------------------------------------------------------------------------------
【書式】
	KEY <キー番号>, <文字列>
【備考】
	未実装
【例】

-------------------------------------------------------------------------------
【書式】
	KEY( <キー番号> ) {ON|OFF|STOP}
【備考】
	ON KEY 割り込みを有効・無効にする。ON は有効。OFF または STOP は無効。
【例】
	FORI=1TO10:KEY(I)ON:NEXT

-------------------------------------------------------------------------------
【書式】
	LEFT$( <文字列>, <長さ> )
【備考】
	<文字列> で示される文字列の、左から <長さ> の文字数だけ切り出して返す関数。
	<長さ> は最大 255 であり、<文字列> の長さより大きな値でも構わない。長さを
	越えている場合は、<文字列> そのものを返す。
	<長さ> に 0 を指定すると、空文字列を返す。
	<長さ> に負の値や 256 以上の値を指定した場合の動作は不定である。

【例】
	LEFT$( "12345", 3 )
	LEFT$( "12345", 100 )
	LEFT$( "12345", 0 )

-------------------------------------------------------------------------------
【書式】
	LEN( <文字列> )
【備考】
	文字列の長さを返す。
【例】
	LEN( "MOJI" )

-------------------------------------------------------------------------------
【書式】
	LOCATE <X>, <Y>, <SW>
【備考】
	カーソルを移動する。
	SW は、カーソル表示スイッチ。0 だと非表示、1〜255 だと表示。
	<X>, <Y>, <SW> はそれぞれ省略できるが、「,」で終えることはできない。
	LOCATE 0, はエラーである。
【例】
	LOCATE 0,0
	LOCATE ,0
	LOCATE ,,1
	LOCATE 10,20,0

-------------------------------------------------------------------------------
【書式】
	LOG( <値> )
【備考】
	自然対数 log(値) を返す。

【例】
	LOG(2.71828)

-------------------------------------------------------------------------------
【書式】 関数
	MID$( <文字列>, <切り出し開始位置>, <文字数> )
【備考】
	<文字列> で示される文字列の、先頭から <切り出し開始位置> 文字目から、
	<文字数> で示される文字数だけ切り出して返す関数。
	<切り出し開始位置> は一番左が 1 である。
	,<文字数> は省略可能で、省略時は「最後まで」になる。
	<文字数> に 0 を指定すると空文字列を返す。
	<切り出し開始位置> が一番右の位置より右側を示す場合、空文字列を返す。
	<切り出し開始位置> に 負の値・0・256以上の値を指定した場合は動作不定である。
	<文字数> に 負の値・256以上の値を指定した場合は動作不定である。

【例】
	MID$( "ABCDEF", 3 )
	MID$( "ABCDEF", 100 )
	MID$( "ABCDEF", 2, 3 )
	MID$( "ABCDEF", 2, 0 )

-------------------------------------------------------------------------------
【書式】 命令
	MID$( <文字列変数>, <切り出し開始位置>, <文字数> ) = <文字列2>
【備考】
	文字列変数の切り出し開始位置から指定の文字数だけを文字列2に置換する。
	A$ = "12345" の場合、MID$(A$,3,2)="ABC" を実行すると A$="12AB5" となる。
	-compatible , -original のオプションで動作が異なるので要注意。

	-compatible は、<文字列変数> に指定の変数を、<文字列2> に単独で指定すると
	上書き更新されて、先頭部分の繰り返しになる。

		A$="123456":MID$(A$,3)=A$:PRINT A$
		121212

	これが、3文字目以降に =A$ の A$ で置き換えるわけですが、123456 の 3 が 1
	に置き換わると、121456 になる。このようにして全文字置換すると、121212 になる。
	しかし、

		A$="123456":MID$(A$,3)=A$+"":PRINT A$
		121234

	=の右側が文字列式になっていると、式の結果が格納される別の領域が確保された上で
	そこに結果が格納され、A$ と A$+"" は違うメモリ領域を指していることになり、
	期待通りの結果が得られる。

	MSX-BASIC がもともとこのバグのような動作を持っているため、-compatible は、
	この挙動を忠実に再現する。

	一方で、-original では、上記２パターンでは、いずれも 121234 と期待通りの
	動作になる。

【例】
	MID$(A$,3,2)="ABC"

-------------------------------------------------------------------------------
【書式】 関数
	MKD$( <数値> )
【備考】
	<数値> を倍精度実数型とした場合に、メモリ格納イメージをそのまま文字列として
	返す。

【例】
	MKD$( 1.2345678901234 )

-------------------------------------------------------------------------------
【書式】 関数
	MKI$( <数値> )
【備考】
	<数値> を整数型とした場合に、メモリ格納イメージをそのまま文字列として返す
	&H3031 なら "10" である。

【例】
	MKI$( &H3031 )

-------------------------------------------------------------------------------
【書式】 関数
	MKS$( <数値> )
【備考】
	<数値> を単精度実数型とした場合に、メモリ格納イメージをそのまま文字列として
	返す。

【例】
	MKS$( 1.23456 )

-------------------------------------------------------------------------------
【書式】
	OCT$( <値> )
【備考】
	値を8進数表記に変換して文字列として返す。
【例】
	OCT$(100)

-------------------------------------------------------------------------------
【書式】
	ON <式> GOSUB <行番号1>, <行番号2> ..., <行番号n>
【備考】
	<式> を整数として評価し、1 なら <行番号1>へ、2 なら <行番号2>へ、.... 
	n なら <行番号n>へ、0 または n+1以上 なら飛ばずに次へ。
	途中の行番号を省略することもできるが、式が省略した番号に対応する値だった場合
	Syntax error になるので注意すること。
	RETURN で、この命令の次へ戻ってくる。
【例】
	ON A GOSUB 100,200,300

-------------------------------------------------------------------------------
【書式】
	ON <式> GOTO <行番号1>, <行番号2> ..., <行番号n>
【備考】
	<式> を整数として評価し、1 なら <行番号1>へ、2 なら <行番号2>へ、.... 
	n なら <行番号n>へ、0 または n+1以上 なら飛ばずに次へ。
	途中の行番号を省略することもできるが、式が省略した番号に対応する値だった場合
	Syntax error になるので注意すること。
【例】
	ON A GOTO 100,200,300

-------------------------------------------------------------------------------
【書式】
	ON INTERVAL=<タイマー> GOSUB <行番号>
【備考】
	<タイマー> で示される 1/60[秒](NTSCモード) または 1/50[秒](PALモード) 単位の
	時間でタイマー割り込みを設定する。<行番号> は、その割り込み処理ルーチンである。
	タイマーは、繰り返し反復実行するタイマーであることに注意すること。
【例】
	ON INTERVAL=30 GOSUB 1000

-------------------------------------------------------------------------------
【書式】
	ON KEY GOSUB <行番号1>,<行番号2>, ... ,<行番号9>,<行番号10>
【備考】
	ファンクションキー Fx が押されたときに <行番号x> をサブルーチンコールする。
	その飛び先を指定する命令。
	個別に KEY(x) ON で有効にしなければ発動しない。

【例】
	ON KEY GOSUB 100,200,300,400,500,600,700,800,900,1000

-------------------------------------------------------------------------------
【書式】
	ON SPRITE GOSUB <行番号>
【備考】
	CCビットが立っていない2枚のスプライトが重なった場合に <行番号> をサブルーチン
	コールする。
	呼ばれたサブルーチン内では、スプライトの衝突割り込みは発生しない。
	唐突を回避してから RETURN しなければ、またすぐに割り込んでしまうことに注意
	すること。

【例】
	ON SPRITE GOSUB 1000:SPRITE ON

-------------------------------------------------------------------------------
【書式】
	ON STRIG GOSUB <行番号0>,<行番号1>,<行番号2>,<行番号3>,<行番号4>
【備考】
	STRIG(n) が押されたときに <行番号n> をサブルーチンコールする。
【例】
	ON STRIG GOSUB 1000,1010,1020

-------------------------------------------------------------------------------
【書式】
	OUT <I/Oポート番号>, <式>
【備考】
	<I/Oポート番号> で指定の I/Oポートに対して、式の値を書き込む。
【例】
	OUT 8, 10

-------------------------------------------------------------------------------
【書式】
	PAD( <番号> )
【備考】
	マウス・トラックボール・タッチパッドの情報を得る。
	<番号> は 8〜19 のみ。
【例】
	A=PAD(12):VX=PAD(13):VY=PAD(14)

-------------------------------------------------------------------------------
【書式】
	PEEK( <アドレス> )
【備考】
	メモリの指定のアドレスから値を読む。
【例】
	A=PEEK(&HF663)

-------------------------------------------------------------------------------
【書式】
	POKE <アドレス>, <値>
【備考】
	メモリの指定のアドレスへ値を書き込む。
【例】
	POKE &HC000, 100

-------------------------------------------------------------------------------
【書式】
	PRINT [[[{式|SPC(式)|TAB(式)}][;|,]] ... ]
【備考】
	文字列を出力する。
【例】
	PRINT 1.0
	PRINT "HELLO"
	PRINT "MOJI";

-------------------------------------------------------------------------------
【書式】
	PRINT USING <書式文字列>;<パラメータ> [,<パラメータ>]...
【備考】
	書式文字列は、文字列で与える。文字列式であっても構わない。
	書式文字列の下記の記号は、特別な意味を持つ。

	! ..... 1文字。パラメータを文字列として評価して、その先頭1文字を出力する。
	        パラメータが空文字なら、" "(半角スペース) に置き換わる。
	@ ..... 文字列。パラメータを文字列として評価して、その文字列を @ の位置に挿入する。
	        ! は先頭の1文字だけだが、@ は文字列全体を出力する点が異なる。
	&& .... 2つの & の間にはスペースを配置することが出来る。&から& の文字数
	        (&そのものも含む)
	#.# ... 数値の一桁
	\\ .... ￥マーク
	** .... 左 * 詰め
	**\ ... ￥マーク、左 * 詰め
	^^^^ .. 指数
	+ ..... 正でも + マークを付ける
	- ..... 符号を付ける

【例】

-------------------------------------------------------------------------------
【書式】
	PUT SPRITE <スプライト番号>, ( <X座標>, <Y座標> ), <色>, <パターン番号>
【備考】
	<スプライト番号> で示されるスプライトのアトリビュートを指定する。
	( <X座標>, <Y座標> ) と、<色>と、<パターン番号>は、少なくとも一つ指定すれば
	良く、他は省略することができる。
	カンマで終わることはできないので、それ以降全て省略する場合は以降のカンマも
	記述しない。
	スプライトモード2では、指定のスプライトが CCビットが立っていない場合に、
	これより優先度が低く、かつ CCビットが立っているスプライトに対して、
	自動的に同じ座標に表示する機能がある。

【例】
	PUT SPRITE 0,,15
	PUT SPRITE 1,(10,20),,0

-------------------------------------------------------------------------------
【書式】
	READ <変数名> [, ...]
【備考】
	DATA文の現在の参照位置から値を取り出して指定の変数へ格納し、参照位置を次へ移動する。
【例】
	READ A$

-------------------------------------------------------------------------------
【書式】
	REM
【備考】
	コメントを入れる。
【例】
	REM COMMENT

-------------------------------------------------------------------------------
【書式】
	RENUM
【備考】
	非対応

-------------------------------------------------------------------------------
【書式】
	RESTORE [<行番号>]
【備考】
	データの参照位置を指定の行番号へ変更する。
【例】
	RESTORE
	RESTORE 1000

-------------------------------------------------------------------------------
【書式】
	RETURN [<行番号>]
【備考】
	サブルーチン呼び出し元へ戻る。
	行番号を指定すると、戻りアドレスをスタックから除去して指定の行番号へ飛ぶ。
【例】
	RETURN
	RETURN 100

-------------------------------------------------------------------------------
【書式】
	RIGHT$( <文字列>, <長さ> )
【備考】
	<文字列> で示される文字列の、右から <長さ> の文字数だけ切り出して返す関数。
	<長さ> は最大 255 であり、<文字列> の長さより大きな値でも構わない。長さを
	越えている場合は、<文字列> そのものを返す。
	<長さ> に 0 を指定すると、空文字列を返す。
	<長さ> に負の値や 256 以上の値を指定した場合の動作は不定である。

【例】
	RIGHT$( "12345", 3 )
	RIGHT$( "12345", 100 )
	RIGHT$( "12345", 0 )

-------------------------------------------------------------------------------
【書式】
	RND( <値> )
【備考】
	乱数を返す。
【例】
	RND(1)

-------------------------------------------------------------------------------
【書式】
	SET SCROLL <X>, <Y>, <マスクモード>, <ページモード>
【備考】
	<X> ... 水平スクロール位置
	<Y> ... 垂直スクロール位置
	<マスクモード> ... 0: マスク無し、1: マスクあり
	<ページモード> ... 0: 単一ページ、1: 2画面横スクロール
	各引数は省略できるが、「,」で終わることはできない。
【例】
	SET SCROLL ,100
	SET SCROLL 10, 20, 1

-------------------------------------------------------------------------------
【書式】
	SCREEN <画面モード>
【備考】
	画面モードを変更する。
	コンパイルオプション(-msx, -msx2, -msx2p, -msxtr)によって挙動が変わる。
	-msx の場合、BIOS の CHGMOD による画面モード変更になる。
	それ以外の場合、SUB-ROM の CHGMODP による画面モード変更になる。
	CHGMOD はカラーパレットの初期化を行わない点が異なる。
	MSX2以上の MSX-BASIC で SCREEN <画面モード> を実行するとカラーパレットが
	初期化されるため、このような挙動にした。
	MSX1とMSX2以降の両方で動作するプログラムで、MSX2の場合パレットを初期化したい
	場合は、-msx を利用して明示的にそのようなコードを記述する必要がある。

	100 SCREEN 1:IF PEEK(&H2D)>0 THEN COLOR
【例】
	SCREEN 5

-------------------------------------------------------------------------------
【書式】
	SIN( <値> )
【備考】
	sin(値) を返す。

【例】
	SIN(1)

-------------------------------------------------------------------------------
【書式】
	SGN( <値> )
【備考】
	<値> の符号を返す。
	負なら -1、正なら 1、0 なら 0 が返る。

【例】
	SGN(A)

-------------------------------------------------------------------------------
【書式】
	SQR( <値> )
【備考】
	<値> の平方根を返す。

【例】
	SQR(9)

-------------------------------------------------------------------------------
【書式】
	SOUND <PSGレジスタ番号>, <書き込むデータ>
【備考】
	<PSGレジスタ番号> で示されるPSGレジスタに、<書き込むデータ> を書き込む。

【例】
	SOUND 0, 100

-------------------------------------------------------------------------------
【書式】
	STR$(式)
【備考】
	整数または単精度実数または倍精度実数で示される式の評価結果を文字列に変換する。

【例】
	STR$(1+2+3)

-------------------------------------------------------------------------------
【書式】
	STICK(式)
【備考】
	式で示される番号の方向キーが現在押されている方向を示す値を返す。

	方向キーの番号
		0: カーソルキー
		1: ジョイスティック1
		2: ジョイスティック2

	方向を示す値
		0: 押されていない
		1: 上
		2: 右上
		3: 右
		4: 右下
		5: 下
		6: 左下
		7: 左
		8: 左上

【例】
	A = STICK(0)

-------------------------------------------------------------------------------
【書式】
	STRIG(式)
【備考】
	式で示される番号のボタンが現在押されている状態を示す値を返す。

	方向キーの番号
		0: スペースキー
		1: ジョイスティック1の1ボタン
		2: ジョイスティック2の1ボタン
		3: ジョイスティック1の2ボタン
		4: ジョイスティック2の2ボタン

	方向を示す値
		 0: 押されていない
		-1: 押されている

【例】
	A = STRIG(0)

-------------------------------------------------------------------------------
【書式】
	STRING$(<数式>,<文字列式>)
【備考】
	<数式> で示される数だけ、<文字列式> で示される文字列の先頭の文字を並べる

【例】
	PRINT STRING$( 10, "A" )

-------------------------------------------------------------------------------
【書式】
	STICK( <ボタン番号> ) {ON|OFF|STOP}
【備考】
	ON STICK GOSUB <行番号n> ... と、指定したボタン番号に対応する <行番号n> を
	呼び出すかどうかのフラグ指定。
【例】
	STRIG(0) ON

-------------------------------------------------------------------------------
【書式】
	TAN( <値> )
【備考】
	tan(値) を返す。

【例】
	TAN(1)

-------------------------------------------------------------------------------
【書式】
	TIME
【備考】
	式の中に記述することで、16bit のタイマー値を取得できる。

【例】
	A = TIME

-------------------------------------------------------------------------------
【書式】
	USR<番号>( <式> ) [ <型識別子> ]
【備考】
	DEFUSR<番号> = <開始アドレス> で指定した開始アドレスを呼び出す関数。
	MSX-BASIC と異なり、返値は整数の扱い。
	他の型を返したい場合は、型識別子を付ける(※BACON固有)

	<式> もコンパイル時に型が確定する。
	ただし、こちらは MSX-BASIC と同様に VALTYP と DAC に値が設定されるため、
	機械語コードの方でどの型を指定されたか検知することが出来る。

【例】
	A = USR(0)$

-------------------------------------------------------------------------------
【書式】
	VAL( <文字列> )
【備考】
	<文字列> を数値に変換する。

【例】
	VAL("123")
	VAL("&HFF0")

-------------------------------------------------------------------------------
【書式】
	VARPTR( <変数名> )
【備考】
	<変数名> のメモリ上のアドレスを返す。値が格納されているアドレスが返される。
	MSX-BACON は、変数名はコンパイル時に消えてしまうので、あくまで値が格納されてる
	部分のみ MSX-BASIC と同じ配置で並べてあります。

【例】
	A%=100:P=VARPTR(A%):PRINT PEEK(P)

-------------------------------------------------------------------------------
【書式】
	VARPTR( #<ファイル番号> )
【備考】
	#0 なら作業用FCB、#1〜#15 は対応するファイル番号の FCB のアドレスを返す。

【例】
	FC=VARPTR(#1)

-------------------------------------------------------------------------------
【書式】
	VDP( <レジスタ番号> ) = 式
【備考】
	<レジスタ番号> で示されるVDPレジスタに対して、式の評価結果を書き込む。
	<レジスタ番号> に指定できるのは、下記の値。
		0〜7 ..... VDP R#0〜#7
		9〜27 .... VDP R#8〜R#26
		33〜48 ... VDP R#32〜R#47
	これ以外の値を指定した場合、何もしない。MSX-BASIC のように 
	Illegal function call にはならないので要注意。
	<レジスタ番号> には式を記述できる。VDP( 24+1 ) のような記述も可能である。
	また、式の値は下位 8bit のみ有効である。上位 8bit は無視される点も、
	MSX-BASIC とは異なる。（MSX-BASIC では上位8bit が 0 以外だと Illegal function 
	call になる。）

【例】
	VDP(24)=100

-------------------------------------------------------------------------------
【書式】
	VDP( <レジスタ番号> )
【備考】
	<レジスタ番号> で示されるVDPレジスタを読み出して、値を返す。
	<レジスタ番号> に指定できるのは、下記の値。
		-9〜-1 ... VDP S#9〜S#1
		0〜7 ..... VDP R#0〜#7
		8 ........ VDP S#0
		9〜27 .... VDP R#8〜R#26
	VDPのコントロールレジスタ R# は、書き込み専用であるため、この関数が返す値は
	最後に書き込んだ値のバックアップ値である。
	VDPのコマンドレジスタ R#32〜R#47 は、書き込み専用であり、かつVDPコマンド実行
	とともに変化してしまうため、本関数ではサポートしていない。
	-9〜27 の値を指定した場合、不定が返る。MSX-BASIC のように Illegal function call
	にはならないので要注意。

【例】
	A=VDP(24)

-------------------------------------------------------------------------------
【書式】
	VPEEK(式)
【備考】
	式で示されるアドレスの VRAM内容を返す。

【例】
	A = VPEEK(&H1800)

-------------------------------------------------------------------------------
【書式】
	VPOKE 式1, 式2
【備考】
	VRAMの「式1で示されるアドレス」へ、式2 の値を書き込む。

【例】
	VPOKE &H1800, 100

-------------------------------------------------------------------------------
【書式】
	WIDTH 式
【備考】
	式の値に合わせて画面のテキストの幅を変更する。

【例】
	WIDTH 40

