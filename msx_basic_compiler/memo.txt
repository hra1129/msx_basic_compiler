FOR文の実装

FOR <V>=<Exp1> TO <Exp2> STEP <Exp3>

　　<V> ← <Exp1>
　　LOOPL_<V> ← AUTO_LABEL1
　　LOOPE_<V> ← <Exp2>
　　LOOPS_<V> ← <Exp3>
　　GOTO AUTO_LABEL2
AUTO_LABEL1:
　　<V> ← <V> + LOOPS_<V>
　　if <V> ≦ LOOPE_<V> POP:GOTO AUTO_LABEL2
　　RET
AUTO_LABEL2:

NEXT は、AUTO_LABEL1 を CALL で呼ぶ。
<Exp3> が負の場合は ≦ のかわりに ≧ を出す。

これで行けそう。AUTO_LABEL は、自動生成ラベル。
FORI=0TO10: FORI=0TO20 なんて変なことをやられても、スタックオーバーフローとか起こさない。
--------------------------------------------------------------------------------
DIM文の実装
vara_area, varsa_area の中に「実体へのポインタ」を格納する変数を作成する。
変数名は、ラベルになり、コード上に名前を示す文字列は残らない。
型も、通常変数と同様にコンパイル時に確定して、ラベル名で区別する。

	varia_A .... A%()
	varfa_A .... A!()
	varda_A .... A#()
	varsa_A .... A$()

実体は heap の中に、実行時に動的に確保される。

実体は、下記の形式
	[size (2byte)] ................. size自身を含まない、これ以降のサイズ
	[N (1byte)] .................... 次元数
	[次元Nの添え字+1 (2byte)]
	[次元(N-1)の添え字+1 (2byte)]
		:
	[次元1の添え字+1 (2byte)]
	[変数の実体 (2/4/8byte)]
	[変数の実体 (2/4/8byte)]
	[変数の実体 (2/4/8byte)]
		:
	[変数の実体 (2/4/8byte)]

	変数の実体は、(0,0)(1,0)(2,0) ... のように左から順にインクリメントする
	順番で並んでいる。

必要な処理は、
	・配列の確保
		DIM で要素数を指定しない場合、「配列として存在しなければ 0〜10 の 11要素としてメモリ確保、
		存在していればそれを維持」と言う動作になる。
		DIM で要素数を指定した場合、「配列として既に存在していれば Redimensioned arrayエラー、
		存在していなければ指定の数でメモリ確保」。
	・配列の解放
		文字列配列の場合、中身の解放も必要。
	・配列の要素のアドレス取得
		変数への代入、VARPTR()


文字列配列変数の解放
	HL →	[サイズ:2byte]
			[次元数:1byte]
			[要素数:2byte]
				:
			[実体 Nbyte]

	実体のアドレス = HL + 2 + 1 + (次元数 << 1)

	実体の中に、この配列変数より若い番地の文字列が格納されている場合、それを解放すると
	文字列配列のアドレスがズレる → メモリは削除によって若い番地にしか移動しないことと、
	変数へは必ずコピーが格納されることを考慮すると、配列変数の実体に、配列変数より若い
	番地が格納されることはあり得ない。従って、解法の途中で配列変数のアドレスがズレること
	は考慮しなくて良い。

		push	hl					; 最後に解放する「文字列配列」のアドレスを保存
		ld		e, [hl]				; DE にサイズ
		inc		hl
		ld		d, [hl]
		inc		hl
		ld		c, [hl]				; C に次元数
		inc		hl
		ld		b, 0
		add		hl, bc
		add		hl, bc				; ここで実体の先頭アドレス、かつ Cy = 0
		ex		de, hl				; HL にサイズ、DE に実体アドレス
		rr		h
		rr		l					; サイズフィールド分の 1 はこの右シフトで切れる、Cy = 1 になる
		or		a, a				; Cy = 0
		sbc		hl, bc				; 次元数を引いて HL = 要素数 にする
		ex		de, hl				; HL に実体アドレス、DE に要素数
	loop:
		push	de
		ld		e, [hl]
		inc		hl
		ld		d, [hl]
		inc		hl
		push	hl
		ex		de, hl
		call	free_string
		pop		hl
		pop		de
		dec		de
		ld		a, e
		or		a, d
		jr		nz, loop
		pop		hl
		jp		free_heap
